<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-persist-*.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- 配置CharacterEncodingFilter为UTF-8，这个Filter执行的顺序要在其他Filter前面 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 指定字符集 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 强制请求设置字符集 -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- 强制响应设置字符集 -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!-- 这个Filter执行的顺序要在其他Filter前面 -->
    <!--
        原因如下，
        request.setCharacterEncoding(encoding);必须在request.getParameter() 前面
        response.setCharacterEncoding(encoding);必须在response.getWriter()前面
    -->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>springDispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-web-mvc.xml</param-value>
        </init-param>
        <!-- Servlet 默认生命周期中，创建对象是在第一次接收到请求时 -->
        <!-- 而DispatcherServlet创建对象后有大量的“框架初始化”工作，不适合在第一次请求时来做
             设置load-on-startup就是为了让DispatcherServlet这web应用启动时创建对象，初始化
             值越小创建的越早
         -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springDispatcherServlet</servlet-name>
        <!-- url-pattern的配置方式一：/拦截所以请求 -->
        <!-- <url-pattern>/</url-pattern>-->
        <!-- url-pattern的配置方式二：配置请求扩展名，例如拦截所以*.html -->
        <!-- <url-pattern>*.html</url-pattern> -->
        <!--
            优点：
                1. js、css、jpg等静态资源完全不经过SpringMVC，不需要特殊处理
                2. 可以实现伪静态的效果。表面上看起来是访问一个HTML文件这样的静态资源，其实实际上是访问经过Java代码处理过的动态页面
                伪静态的优点：
                    1. 给黑客的入侵增加难度。
                    2. 有利于SEO优化（让百度、谷歌这样的搜索引擎更容易的找到我们的项目）
                伪静态的缺点：
                    1.不符合RESTFul风格
        -->
        <!--
            为什么要另外配置一个Json扩展名呢？
                如果一个Ajax请求扩展名是html，但实际服务器给浏览器返回的是json数据，二者就不匹配，会出现406错误。
        -->
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>

    <!--
        解决报错
        名称[spring.liveBeansView.mbeanDomain]未在此上下文中绑定。找不到[spring.liveBeansView.mbeanDomain]。] [08:33:57.096] [DEBUG] [RMI TCP Connection(3)-127.0.0.1] [org.springframework.jndi.JndiTemplate] [Looking up JNDI object with name [spring.liveBeansView.
    -->
<!--    <context-param>-->
<!--        <param-name>spring.profiles.active</param-name>-->
<!--        <param-value>dev</param-value>-->
<!--    </context-param>-->
<!--    <context-param>-->
<!--        <param-name>spring.profiles.default</param-name>-->
<!--        <param-value>dev</param-value>-->
<!--    </context-param>-->
<!--    <context-param>-->
<!--        <param-name>spring.liveBeansView.mbeanDomain</param-name>-->
<!--        <param-value>dev</param-value>-->
<!--    </context-param>-->





</web-app>